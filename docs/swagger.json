{
  "openapi": "3.0.0",
  "info": {
    "title": "Contracts Management API",
    "description": "Contracts Management API Documentation",
    "version": "1.0.0",
    "contact": {
      "name": "Danilo Souza",
      "email": "danilo_souza19@outlook.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://mit-license.org"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3335/api/v1",
      "description": "Local Dev environment"
    }
  ],
  "paths": {
    "/sessions": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Authenticate user",
        "description": "Authenticate user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "example": {
                  "email": "johndoe@example.com",
                  "password": "1234"
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "token": {
                        "type": "string"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "example": {
                      "token": "string",
                      "user": {
                        "email": "johndoe@example.com",
                        "name": "John Doe"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a user",
        "description": "Create a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Email already Exists"
          }
        }
      }
    },
    "/people-address": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Create a person address",
        "description": "Create a person address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAddress"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {}
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/people": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Create a person",
        "description": "Create a person",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {}
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/properties-address": {
      "post": {
        "tags": [
          "Property"
        ],
        "summary": "Create a property address",
        "description": "Create a property address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAddress"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {}
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/properties": {
      "post": {
        "tags": [
          "Property"
        ],
        "summary": "Create a Property",
        "description": "Create a Property",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Property"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {
            "description": "Person (owner_id) or address does dot exists or fields validation failed"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "created_at": {
            "type": "Date"
          },
          "updated_at": {
            "type": "Date"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ],
        "example": {
          "name": "John Doe",
          "email": "johndoe@example.com",
          "password": "1234"
        }
      },
      "PersonAddress": {
        "properties": {
          "id": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "neighborhood": {
            "type": "string"
          },
          "created_at": {
            "type": "Date"
          },
          "updated_at": {
            "type": "Date"
          }
        },
        "required": [
          "postal_code",
          "street",
          "city",
          "neighborhood"
        ],
        "example": {
          "postal_code": "75100000",
          "street": "Some Street",
          "state": "GO",
          "city": "Some City",
          "neighborhood": "Some neighborhood"
        }
      },
      "Person": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "document_id": {
            "type": "string"
          },
          "is_legal_person": {
            "type": "boolean"
          },
          "telephone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address_id": {
            "type": "string"
          },
          "created_at": {
            "type": "Date"
          },
          "updated_at": {
            "type": "Date"
          }
        },
        "required": [
          "name",
          "document_id",
          "telephone",
          "address_id"
        ],
        "example": {
          "name": "John Doe",
          "document_id": "000.000.000-00",
          "telephone": "62 9 9999-9999",
          "email": "johndoe@example.com",
          "address_id": "e0bc11f8-f163-4271-a95a-96de27699478"
        }
      },
      "PropertyAddress": {
        "properties": {
          "id": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "neighborhood": {
            "type": "string"
          },
          "created_at": {
            "type": "Date"
          },
          "updated_at": {
            "type": "Date"
          }
        },
        "required": [
          "postal_code",
          "street",
          "city",
          "neighborhood"
        ],
        "example": {
          "postal_code": "75100000",
          "street": "Some Street",
          "state": "GO",
          "city": "Some City",
          "neighborhood": "Some neighborhood"
        }
      },
      "Property": {
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "is_legal_person": {
            "type": "boolean"
          },
          "address_id": {
            "type": "string"
          },
          "iptu_id": {
            "type": "string"
          },
          "registration_id": {
            "type": "string"
          },
          "registry_office": {
            "type": "string"
          },
          "measure_type": {
            "type": "string"
          },
          "measure_amount": {
            "type": "number"
          },
          "created_at": {
            "type": "Date"
          },
          "updated_at": {
            "type": "Date"
          }
        },
        "required": [
          "description",
          "owner_id",
          "address_id",
          "iptu_id",
          "registration_id",
          "registry_office",
          "measure_type",
          "measure_amount"
        ],
        "example": {
          "description": "some property",
          "address_id": "e0bc11f8-f163-4271-a95a-96de27699478",
          "iptu_id": "123.4555.555.55",
          "owner_id": "e0bc11f8-f163-4271-a95a-96de27699478",
          "registration_id": "123123123",
          "registry_office": "Some Office",
          "measure_type": "m2",
          "measure_amount": 55
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Token is missing or invalid | user is not admin"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
